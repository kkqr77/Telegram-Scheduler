import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, Boolean
from sqlalchemy.future import select
from sqlalchemy import BigInteger

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DATABASE_URL = "postgresql+asyncpg://tgbot:123456@localhost:5432/taskstg"

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SQLAlchemy
Base = declarative_base()

# –ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏
class Task(Base):
    __tablename__ = 'tasks445'

    id = Column(BigInteger, primary_key=True)
    name = Column(String, nullable=False)
    due_date = Column(DateTime, nullable=False)
    timeminutes = Column(String, nullable=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Å—Ç—ã–ª—å
    is_completed = Column(Boolean, default=False)
    chat_id = Column(BigInteger, nullable=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏–∏
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(
    engine, expire_on_commit=False, class_=AsyncSession
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class TaskForm(StatesGroup):
    waiting_for_task_name = State()
    waiting_for_task_due_date = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å FSM
@dp.message(Command("task"))
async def cmd_create_task(message: Message, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    await state.set_state(TaskForm.waiting_for_task_name)
    await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∑–∞–¥–∞—á–∞?‚úåÔ∏è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.waiting_for_task_name)
async def process_task_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
    """
    task_name = message.text
    await state.update_data(task_name=task_name)
    await state.set_state(TaskForm.waiting_for_task_due_date)
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è?üïõ (–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm dd-mm)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(TaskForm.waiting_for_task_due_date)
async def process_task_due_date(message: Message, state: FSMContext):
    """
    Processes the task due date and time, saves the task to the database, and completes the state.
    """
    try:
        task_data = await state.get_data()
        task_name = task_data['task_name']
        
        task_time = message.text
        now = datetime.now()
        task_datetime = datetime.strptime(task_time, "%H:%M %d-%m")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if (task_datetime.month < now.month) or (task_datetime.month == now.month and task_datetime.day < now.day):
            task_datetime = task_datetime.replace(year=now.year + 1)
        else:
            task_datetime = task_datetime.replace(year=now.year)

        time_str = task_datetime.strftime("%H:%M")

        async with async_session() as session:
            # Create and store the new task in the database
            new_task = Task(
                name=task_name,
                due_date=task_datetime,
                timeminutes=time_str,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                chat_id=message.chat.id,
                is_completed=False
            )

            session.add(new_task)
            await session.commit()

        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_name}' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {task_datetime.strftime('%d-%m-%Y %H:%M')}")

    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        # Clear the state
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    logging.info("Checking for reminders...")
    async with async_session() as session:
        tasks = await session.execute(
            select(Task).where(Task.is_completed == False)
        )
        tasks = tasks.scalars().all()

        current_datetime = datetime.now()

        for task in tasks:
            try:
                task_due_datetime = task.due_date.replace(hour=int(task.timeminutes.split(':')[0]), 
                                                           minute=int(task.timeminutes.split(':')[1]))
                logging.info(f"{task_due_datetime}")

                if current_datetime >= task_due_datetime - timedelta(minutes=1) and current_datetime < task_due_datetime:
                    logging.info(f"Sending reminder for task '{task.name}'...")
                    await bot.send_message(chat_id=task.chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ '{task.name}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                    logging.info(f"Reminder sent for task '{task.name}'")

                    task.is_completed = True
                    await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ '{task.name}': {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –Ω–æ–º–µ—Ä–∞–º–∏
@dp.message(Command("ctask"))
async def cmd_ctask(message: Message):
    async with async_session() as session:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        completed_tasks = await session.execute(
            select(Task).where(Task.chat_id == message.chat.id, Task.is_completed == True)
        )
        completed_tasks = completed_tasks.scalars().all()

        if not completed_tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –Ω–æ–º–µ—Ä–∞–º–∏
        task_list = "\n".join([f"{i + 1} - {task.name} (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞)" for i, task in enumerate(completed_tasks)])
        await message.answer(f"–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{task_list}")

# –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(Command("dtask"))
async def cmd_dtask(message: Message):
    async with async_session() as session:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = await session.execute(
            select(Task).where(Task.chat_id == message.chat.id, Task.is_completed == False)
        )
        tasks = tasks.scalars().all()

        if not tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        task_list = "\n".join([f"{i + 1} - {task.name} (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.is_completed})" for i, task in enumerate(tasks)])
        task_list += "\n\n–ù–∞–ø–∏—à–∏—Ç–µ /remove –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /remove 1"
        await message.answer(f"–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{task_list}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
@dp.message(Command("remove"))
async def remove_task(message: Message):
    async with async_session() as session:
        try:
            task_number = int(message.text.split()[1]) - 1  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = await session.execute(
                select(Task).where(Task.chat_id == message.chat.id, Task.is_completed == False)
            )
            tasks = tasks.scalars().all()

            if 0 <= task_number < len(tasks):
                task_to_delete = tasks[task_number]

                await session.delete(task_to_delete)
                await session.commit()

                await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_to_delete.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except (ValueError, IndexError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /remove <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –Ω–æ–º–µ—Ä—É
@dp.message(Command("cremove"))
async def remove_completed_task(message: Message):
    async with async_session() as session:
        try:
            task_number = int(message.text.split()[1]) - 1  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            completed_tasks = await session.execute(
                select(Task).where(Task.chat_id == message.chat.id, Task.is_completed == True)
            )
            completed_tasks = completed_tasks.scalars().all()

            if 0 <= task_number < len(completed_tasks):
                task_to_delete = completed_tasks[task_number]

                await session.delete(task_to_delete)
                await session.commit()

                await message.answer(f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ '{task_to_delete.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except (ValueError, IndexError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /cremove <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>.")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üå∏ –Ø —Ç–≤–æ—è –ø–æ–º–æ—â–Ω–∏—Ü–∞, –Æ–∏, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –±–æ–ª–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
    "üìù /task <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è —Å–ø—Ä–æ—à—É —Ç–µ–±—è –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
    "üìÖ /dtask - –ü–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏! –Ø –ø–æ–∫–∞–∂—É –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Ç—ã –∑–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.\n\n"
    "üóëÔ∏è /remove <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª—è–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã. –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ —Ç–µ–±—è!\n\n"
    "‚úÖ /ctask - –•–≤–∞—Å—Ç–∞–π—Å—è —Å–≤–æ–∏–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏! –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª.\n\n"
    "‚ùì /help - –Ø –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑!\n\n"
    "üåü /about - –Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö!\n\n"
    "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π –∏ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º! üåüüí™"
)

# –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    while True:
        logging.info("Checking for reminders...")
        await send_reminders()
        logging.info("Reminders checked. Sleeping for 1 minute...")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(check_reminders())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
